int no_return(int i, int j, int k) {
  int m;
  m = i * j * k + (i + j + k);
}

int not_lvalue_assign() {
  no_return() = 213;
  no_return = 67; // a function is not a lvalue
  NIL = 32;
  1 = 67;
  1.0 = 123.7;
  return -1;
}

int div0() {
  int a;
  a = 10 / 0;
  return a;
}

int nil_arith(int x) {
  x = NIL + 2 - 3 * 4 / 5;
  x = 1 + 2 - 3 * NIL / 5;
  x = (1 * 2) - (3 + NIL);
  return x;
}

int nil_rel(float x) {
  x = NIL < 2 >= 3 <= 4 > 5 == 6 != 7;
  x = 1 < 2 >= 3 <= 4 > 5 == NIL != 7;
  x = 1 < 2 > 3;
  return x;
}

int list_in_arith_op(int list l) {
  l = l + NIL;
  l = 3 != 2;
  l = NIL <= 2;
  l = 3 < NIL;
  l = 3 == l;
  l = l >= 2;
  int x;
  x = l == NIL;
  return x;
}

int many_or_few_args_fn_call(int i) {
  return many_or_few_args_fn_call(i);
  return many_or_few_args_fn_call(i, i);
  return many_or_few_args_fn_call();
}

int mismatch_types_fn_call(int i, int list l) {
  return mismatch_types_fn_call(NIL, NIL);
  return mismatch_types_fn_call(12312.237123, 100);
}

int list get_l(int n) {
  return NIL;
}

int err_assign() {
  int list x;
  x = mismatch_types_fn_call(100, x);
  x = 1203;
  x = 213.51;
  {
      int x;
      x = get_l(x);
      {
        int x;
        x = NIL;
      }
  }
  x = NIL;
  return 0;
}

int map(int i, int j) {
  return i + 1;
}

int filter(float i) {
  return i < 10;
}

int invalid_filter(int list l) {
  return 0;
}

int list_mapfil() {
  int list l;
  int x;
  x = 10;
  l = x >> l;
  l = map >> x;
  l = map >> l;
  l = filter >> l;
  l = invalid_filter >> l;
  l = invalid_filter >> x;
  x = filter << l;

  return x;
}

int list ll() {
  return NIL;
}

int list_cons(int list l) {
  float x;
  l = 1 : 2 : l;
  l = (NIL + 2) : l;
  l = 1.123123 : 2 : x + 2 * 3 / 4 - 5 : l;
  l = NIL : l;
  l = l : x;
  l = 1 : l + x;
  return ?l;
}

int uniops() {
  int list l;
  float x;

  x = !l; // a `number` cant be the tail of `int list`
  l = !x; // a `int list` cant be the tail of `number`
  l = %123; // a `int list` cant be the pop-tail of `number`
  x = %l; // a `number` cant be the pop-tail of `int list` 
  l = ?x; // a `int list` cant be the head of `number`

  x = ?l;
  x = ?ll();
  x = list_cons(l);
  x = list_cons(NIL);

  x = %ll(); // a `number` cant be the pop-tail of `int list` 
  x = !ll(); // a `number` cant be the tail of `int list`

  float list L_;
  L_ = ?ll(); // a `float list` cant be the head of `float list`
  L_ = %ll(); // a `float list` cant be the pop-tail of `int list`
  L_ = !ll(); // a `float list` cant be the tail of `int list`
  x = list_cons(L_); // a `int list` argument cant be `float list`

  int list x_;
  x_ = ?NIL;
  x_ = %NIL;
  x_ = !NIL;

  return x;
}

int no_main() {
  return 0;
}
