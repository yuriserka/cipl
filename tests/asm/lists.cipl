int calc(int a) {
    return a * 2 - 4;
}

float add1f(int x) {
    return x + 1.5;
}

int print_list_it(int list l) {
    int i;
    write("iterative_list_print: [");
    int list it;
    it = l;
    for (i = 0; it != NIL; it = %it) {
        write(?it);
        if (!it != NIL) {
            write(", ");
        }
    }
    writeln("]");
    return it == NIL;
}

int print_ilist_rec(int list l) {
    if (l == NIL) return 0;
    write(?l);
    if (!l != NIL) {
        write(", ");
    }
    print_ilist_rec(!l);
    return 0;
}

int print_flist_rec(float list l) {
    if (l == NIL) return 0;
    write(?l);
    if (!l != NIL) {
        write(", ");
    }
    print_flist_rec(!l);
    return 0;
}

int sum_list(int list l) {
    if (l == NIL) return 0;
    return ?l + sum_list(!l);
}

int not_3dot5(float x) {
    return x - 3.5;
}

int main() {
    int list a;
    if (a == NIL) {
        writeln("a is nil so initializing");
        a = 3.45 : 12.2 : 1+2 : 4*4 : 7-!3 : a;

        write("recursive_list_print: [");
        print_ilist_rec(calc(3) : 33 : sum_list(a) : NIL);
        writeln("]");

        write("sum of list a = ");
        writeln(sum_list(a));

        if (a == NIL) writeln("sounds bad!");
        else if (print_list_it((1>2) : 4.32 : calc(?a) : a))
            writeln("internal it is nil as expected");
    } else {
        writeln("something is wrong");
    }

    float list b;
    b = not_3dot5 << add1f >> calc >> add1f >> calc >> a;
    // a = [3 : 12 : 3 : 16 : 7]
    // t1 = calc >> a = [2 : 20 : 2 : 28 : 10]
    // t2 = add1f >> (t1 {cast_tofl}) = [3.5 : 21.5 : 3.5 : 29.5 : 11.5]
    // t3 = calc >> (t2 {cast_toint}) = [2 : 38 : 2 : 54 : 18]
    // b = add1f >> (t3 {cast_tofl}) = [3.5 : 39.5 : 3.5 : 55.5 : 19.5]
    // b = not_3dot5 << (t3) = [39.5 : 55.5 : 19.5]
    write("b: [");
    print_flist_rec(b);
    writeln("]");

    return 0;
}
